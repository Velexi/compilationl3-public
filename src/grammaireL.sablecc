Package sc;
Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
chiffre = ['0' .. '9'];
alpha = [lettre + ['_' + '$']];
alphanum = [lettre + chiffre];

Tokens

espaces = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);
virgule = ',';
div = '/';
pointvirgule = ';';
mult = '*';
moins = '-';
lpar = '(';
rpar = ')';
crochetouvrant = '[';
crochetfermant = ']';
accoladeouvrante = '{';
accoladefermante = '}';
egal = '=';
inf = '<';
et = '&';
ou = '|';
non = '!';
plus = '+';
si = 'si';
alors = 'alors';
sinon = 'sinon';
tantque = 'tantque';
faire = 'faire';
entier = 'entier';
retour = 'retour';
lire = 'lire';
ecrire = 'ecrire';
nombre = chiffre+;
identif = alpha alphanum*;

Ignored Tokens

espaces, commentaire;

Productions

programme = {variables_et_fonctions} optdecvar liste_de_fonc |
            {liste_de_fonctions} liste_de_fonc;

optdecvar = liste_de_variables pointvirgule;

liste_de_variables = {declaration_variables} virgule dec_var liste_de_var |
                     {declaration_une_variable} virgule dec_var;

dec_var = {var_entier} entier identif |
          {var_tableau} entier identif crochetouvrant nombre crocher_fermant;

liste_de_fonc = {liste_de_fonctions} dec_fonc liste_de_fonc |
                {fin_de_liste} ;

dec_fonc = {fonction_avec_var_locales} identif parametres optdecvar bloc_instructions |
           {fonction_sans_var_locales} identif parametres bloc_instructions ;

