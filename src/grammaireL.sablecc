Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
chiffres = ['0' .. '9'];

Tokens

espaces = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);

plus = '+';
minus = '-';
mult ='*';
div ='/';
lpar ='(';
rpar =')';
egal = '=';
inf = '<';
pointvirgule = ';';
ou = '|';
et = '&';
not = '!';
oaccolade = '{';
caccolade = '}';
crochetouvrant = '[';
crochetfermant = ']';
si = 'si';
sinon = 'sinon';
tantque = 'tantque';
faire = 'faire';
entier = 'entier';
identif=lettre+|'_'*|'$'*|chiffres*;
exp='exp';
bloc='bloc';
alors = 'alors';
return = 'return';
ecrire = 'ecrire';
lire = 'lire';
main = 'main';

Ignored Tokens

espaces, commentaire;

Productions

programme = declavar semicolon declafonct ;

declavar =  {var} entier identif seqvar |
            {tableau} entier identif crochetouvrant exp crochetfermant seqvar |
            {rien} ;

seqvar =    {seqvar} entier identif seqvar |
            {seqtableau} entier identif crochetouvrant exp crochetfermant seqvar |
            {rien} ;

declafonct = {fonction} identif lpar declavar rpar declavar bloc declafonct | {rien};

instruction = {instruction} affectation | sialors | sisinon | itantque | retour | appelsimple | appelpredefini | bloc;

affectation = {affectation} identif egal exp;

sialors = {sialors} si exp alors instruction;

itantque = {itantque} tantque exp faire instruction;

retour = {retour} return exp;

appelsimple = {appelsimple} appelfonction;

appelpredefini = {appelpredefini} ecrire lpar exp rpar | lire lpar rpar;

bloc = {bloc} oaccolade exp caccolade;

listi = {listi} instuction listi | {rien};

liste = {liste} prio1 listeprime | {rien};

listeprime = {listeprime} prio1 liste | {rien};

prio1 = {prio1} prio1 ou prio2 | prio2;

prio2 = {prio2} prio2 et prio3 | prio3;

prio3 = {prio3} prio3 egal prio4 | prio3 inf prio4 | prio4;

prio4 = {prio4} prio4 plus prio5 | prio4 minus prio5 | prio5;

prio5 = {prio5} prio5 mult prio6 | prio5 div prio6 | prio6;

prio6 = {prio6} not prio7 | prio7;

prio7 = {prio7} lpar prio1 rpar | nombre | appelfct | var;

nombre = {nombre} nombre chiffre | chiffre;

appelfct = {appelfct} identif lpar liste rpar;

var = {var} identif;






