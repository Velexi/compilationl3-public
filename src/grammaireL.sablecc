Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
chiffres = ['0' .. '9'];

Tokens

espaces = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);

plus = '+';
minus = '-';
mult ='*';
div ='/';
lpar ='(';
rpar =')';
egal = '=';
infer = '<';
pointvirgule = ';';
ou = '|';
et = '&';
not = '!';
oaccolade = '{';
caccolade = '}';
crochetouvrant = '[';
crochetfermant = ']';
si = 'si';
sinon = 'sinon';
tantque = 'tantque';
faire = 'faire';
entier = 'entier';
identif=lettre+|'_'*|'$'*|chiffres*;
alors = 'alors';
return = 'return';
ecrire = 'ecrire';
lire = 'lire';
main = 'main';

Ignored Tokens

espaces, commentaire;

Productions

programme = declavar pointvirgule declafonct ;

declavar =  {var} entier identif seqvar |
            {tableau} entier identif crochetouvrant exp crochetfermant seqvar |
            {rien} ;

seqvar =    {seqvar} entier identif seqvar |
            {seqtableau} entier identif crochetouvrant exp crochetfermant seqvar |
            {rien} ;

declafonct = {fonction} identif lpar [tag1]:declavar rpar [tag2]:declavar bloc declafonct | {rien};

instruction =  {affectation} affectation | {sialors} sialors | {sisinon} sisinon | {itantque} itantque |{retour} retour | {appelsimple} appelsimple | {appelpredefini} appelpredefini | {bloc} bloc;

affectation =  identif egal exp;

sialors =  si exp alors instruction;

sisinon =  si exp alors [tag1]:instruction sinon [tag2]:instruction;

itantque =  tantque exp faire instruction;

retour =  return exp;

appelsimple =  appelfct;

appelpredefini =  {ecrire} ecrire lpar exp rpar | {lire} lire lpar rpar;

bloc = {bloc} oaccolade exp caccolade;

listi =  {i} instruction listi | {rien};

exp = {exp} prio1 listeprime | {rien};

listeprime = {prio1} prio1 exp | {rien};

prio1 = {prio2} prio1 ou prio2 | {prio22} prio2;

prio2 = {prio3} prio2 et prio3 | {prio33} prio3;

prio3 = {prio4} prio3 egal prio4 |{prio44} prio3 infer prio4 | {prio444} prio4;

prio4 = {prio5} prio4 plus prio5 | {prio55} prio4 minus prio5 | {prio555}prio5;

prio5 = {prio6} prio5 mult prio6 |{prio66} prio5 div prio6 |{prio666} prio6;

prio6 = {prio7} not prio7 | {prio77}prio7;

prio7 =  {p} lpar prio1 rpar | {nombre}nombre | {appelfct} appelfct | {var}var;

nombre =   {n} nombre chiffres | {c} chiffres;

appelfct =  identif lpar exp rpar;

var = identif;






